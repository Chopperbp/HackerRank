using Xunit;

//https://www.hackerrank.com/contests/hack-the-interview-iv/challenges/maximum-or-1/problem
//https://www.hackerrank.com/topics/digit-dp
namespace Challenges.NumberOfIntegers
{
    public class Tests
    {
        [Theory]
        [InlineData("1", "100", 1, 18)] // The integers - [2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] have at most 1 non-zero digit.
        [InlineData("10", "55", 2, 41)]  //All integers from 10 to 55 except - [20, 30, 40, 50] have 2 non-zero digits.
        [InlineData("9368562610555760", "495198379216688200470336966841257483773626312596741064757041005324417767628018874024392384500",95,0)] //OK
        [InlineData("627853907469124521429977", "953022761509988465931022569949020271394528905327031814530438328331476302434659734585465578374658", 94, 796829182)] //TimeOut
        [InlineData("086979138539457083140185609184510916009", "1166673736688925086395529455548640644835757669289132194341776407326722689702209505602103209", 44, 49917257)]
        //104304533842983724222628450425990810350825164495758434308171472758397, mod: 199571957
        [InlineData("03797103485908554124052510093", "8524515764774231049404963782587026754481838728515487974511813648560186192764262272713514691931988494", 62, 303778902)]
        [InlineData("205051024583175884438122919882421672097087114679", "4927079049281772010790345404318018631663796774698011174883521488658580999819655443255733238", 14, 425936352)] //17
        [InlineData("10000", "47622", 3, 1887)]
        [InlineData("153461", "457823489", 4, 577669)]
        public void TestBigInteger(string L, string R, int K, int expected)
        {
            var result = NumberOfIntegersBigInteger.getNumberOfIntegers(L, R, K);
            Assert.Equal(expected, result);
        }

        [Theory]
        [InlineData("1", "100", 1, 18)] // The integers - [2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] have at most 1 non-zero digit.
        [InlineData("10", "55", 2, 41)]  //All integers from 10 to 55 except - [20, 30, 40, 50] have 2 non-zero digits.
        //[InlineData("086979138539457083140185609184510916009", "1166673736688925086395529455548640644835757669289132194341776407326722689702209505602103209", 44, 49917257)]
        //[InlineData("03797103485908554124052510093", "8524515764774231049404963782587026754481838728515487974511813648560186192764262272713514691931988494", 62, 303778902)]
        //[InlineData("205051024583175884438122919882421672097087114679", "4927079049281772010790345404318018631663796774698011174883521488658580999819655443255733238", 14, 425936352)] //17
        public void TestString(string L, string R, int K, int expected)
        {
            var result = NumberOfIntegersString.getNumberOfIntegers(L, R, K);
            Assert.Equal(expected, result);
        }
        [Theory]
        [InlineData("1", "25",2, 14)] 
        [InlineData("1", "100", 1, 18)] // The integers - [2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] have at most 1 non-zero digit.
        [InlineData("10", "55", 2, 41)]  //All integers from 10 to 55 except - [20, 30, 40, 50] have 2 non-zero digits.
        [InlineData("086979138539457083140185609184510916009", "1166673736688925086395529455548640644835757669289132194341776407326722689702209505602103209", 44, 49917257)]
        [InlineData("03797103485908554124052510093", "8524515764774231049404963782587026754481838728515487974511813648560186192764262272713514691931988494", 62, 303778902)]
        [InlineData("205051024583175884438122919882421672097087114679", "4927079049281772010790345404318018631663796774698011174883521488658580999819655443255733238", 14, 425936352)] //17
        [InlineData("7469148586196994198230096629880767331", "5490308340700342702718618151202059637491665853798917177065433029315046379742955314551796565072353", 26, 760378092)] 
        public void Test(string L, string R, int K, int expected)
        {
            var result = NumberOfIntegers.getNumberOfIntegers(L, R, K);
            Assert.Equal(expected, result);
        }
    }
}
